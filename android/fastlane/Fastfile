require 'dotenv'

env_path = File.expand_path("../../../.env", __FILE__)
Dotenv.load(env_path) if File.exist?(env_path)

default_platform(:android)

platform :android do
  desc "Distribute APK to Firebase and upload mapping to Sentry"
  lane :firebase_distribution do
    flutter_clean
    flutter_pub_get
    build_apk
    apk_path = locate_apk
    mapping_path = locate_mapping

    distribute_to_firebase(apk_path)
    upload_to_sentry(mapping_path) if ENV["SENTRY_AUTH_TOKEN"]
  end

  def flutter_clean
    sh "flutter clean"
  end

  def flutter_pub_get
    sh "flutter pub get"
  end

  def build_apk
    sh "flutter build apk --release --target lib/main.dart --no-tree-shake-icons"
  rescue => e
    UI.error("❌ Failed to build APK: #{e.message}")
    raise
  end

  def locate_apk
    possible_paths = [
      File.expand_path("../../build/app/outputs/flutter-apk/app-release.apk", __dir__),
      File.expand_path("../build/app/outputs/flutter-apk/app-release.apk", __dir__),
      "build/app/outputs/flutter-apk/app-release.apk"
    ]
    apk_path = possible_paths.find { |path| File.exist?(path) }
    unless apk_path
      UI.user_error!("APK not found. Checked:\n#{possible_paths.join("\n")}")
    end
    UI.success("✅ Found APK at: #{apk_path}")
    apk_path
  end

  def locate_mapping
    path = File.expand_path("../../build/app/outputs/mapping/release", __dir__)
    unless Dir.exist?(path)
      UI.important("⚠️ Mapping directory not found: #{path}")
      return nil
    end
    path
  end

  def distribute_to_firebase(apk_path)
    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
      android_artifact_type: "APK",
      android_artifact_path: apk_path,
      groups: ENV["Firebase_TESTERS"] || "testers",
      release_notes: ENV["FIREBASE_RELEASE_NOTES"] || "New release",
      debug: true
    )
  end

  def upload_to_sentry(mapping_path)
    return unless mapping_path
     sentry_upload_proguard(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org: ENV["SENTRY_ORG"],
      project: ENV["SENTRY_PROJECT"],
      dist: Time.now.to_i.to_s,
      include: mapping_path,
      url_prefix: "~/",
      wait: true,
      debug: true
    )
  end
end
